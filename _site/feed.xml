<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>gelatindesign</title>
    <description></description>
    <link>http://gelatindesign.co.uk/</link>
    <atom:link href="http://gelatindesign.co.uk/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 10 Feb 2015 19:06:59 +0000</pubDate>
    <lastBuildDate>Tue, 10 Feb 2015 19:06:59 +0000</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>Sprint Two - World Editor</title>
        <description>&lt;p&gt;For this, the second sprint, I focused on refactoring my original ideas and developing the initial world editor with river and elevation brushes.&lt;/p&gt;

&lt;h2 id=&quot;refactor&quot;&gt;Refactor&lt;/h2&gt;

&lt;p&gt;A few weeks ago &lt;a href=&quot;https://twitter.com/czaplic&quot;&gt;Evan&lt;/a&gt; (the author of Elm) wrote a tutorial on &lt;a href=&quot;https://github.com/evancz/elm-architecture-tutorial&quot;&gt;architecture in Elm&lt;/a&gt;. This is a fantastic resource that you should definitely read if you are already using or interested in Elm.&lt;/p&gt;

&lt;p&gt;I used this as a guide to refactoring the code and experiments from &lt;a href=&quot;/project-iso/sprint-one-experiments&quot;&gt;sprint one&lt;/a&gt; rendering an isometric map.&lt;/p&gt;

&lt;h2 id=&quot;render&quot;&gt;Render&lt;/h2&gt;

&lt;p&gt;Before I could start on editing a map I needed to render it out to the screen. The existing code from the previous sprint worked, but was not at all open to dynamically changing the different tiles. Admittedly a simpler route would have been to just use text files or one of the existing isometric tile layout tools. However I fully intend to release the world editor as part of the game, and honestly it felt like a good place to start with learning a few techniques in elm.&lt;/p&gt;

&lt;p&gt;The default world is an 8 by 8 grid of blank tiles. There’s a slight offset rendering issue with the tiles at the moment, but it’s placeholder so that’s something for another day.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/blog/2015-02-10/default-world.png&quot; alt=&quot;Default world&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;editor&quot;&gt;Editor&lt;/h2&gt;

&lt;p&gt;Having sorted out the world rendering, I needed to add the ability to edit the map through an interface. There were a few tricky technical problems I had to overcome but once I understood how to get it done, building it was fairly straightforward.&lt;/p&gt;

&lt;p&gt;There remains many issues but I’ve got the basic principle down. I’ll need to add intelligent painting of elevation and rivers that adds slopes around hills and curves rivers.&lt;/p&gt;

&lt;p&gt;I haven’t yet implemented saving and loading since there is some discussion on the elm mailing list about coming future changes which will have an impact here. So I’ll leave this to a future sprint.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/blog/2015-02-10/editor-interface.gif&quot; alt=&quot;Default world&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It’s not a terribly exciting game so far (since there’s no actual gameplay…), but I need to develop an &lt;a href=&quot;http://en.wikipedia.org/wiki/Minimum_viable_product&quot;&gt;MVP&lt;/a&gt; for the upcoming &lt;a href=&quot;http://www.egx.net/rezzed&quot;&gt;Rezzed&lt;/a&gt; conference in case anyone cares to ask. So the next couple of sprints will focus on actual combat gameplay, and perhaps initial conversation mechanics if I have time.&lt;/p&gt;
</description>
        <pubDate>Tue, 10 Feb 2015 00:00:00 +0000</pubDate>
        <link>http://gelatindesign.co.uk/project-iso/sprint-two-world-editor</link>
        <guid isPermaLink="true">http://gelatindesign.co.uk/project-iso/sprint-two-world-editor</guid>
        
        
        <category>project-iso</category>
        
      </item>
    
      <item>
        <title>Functional Programming</title>
        <description>&lt;p&gt;This is the first in a series of articles I will be writing about game development in &lt;a href=&quot;http://elm-lang.org&quot;&gt;elm&lt;/a&gt;. It is a language that currently compiles into html and javascript so you can deploy it straight to the web or package it in &lt;a href=&quot;https://github.com/nwjs/nw.js&quot;&gt;nw.js&lt;/a&gt; to create a standalone app or game. These are not so much tutorials but more things I’ve had to learn as I progress. Since elm is in active development I’ll be updating the articles if and when they become out of date. And also for any mistakes I make…&lt;/p&gt;

&lt;p&gt;Functional programming (FP) is a suprisingly ill-defined paradigm. It is many things to many people, but what it represents to me is a community who desire to write simpler composable code, to avoid strong &lt;a href=&quot;http://www.infoq.com/presentations/Simple-Made-Easy&quot;&gt;complecting&lt;/a&gt; and to create easy to debug software.&lt;/p&gt;

&lt;h2 id=&quot;games&quot;&gt;Games&lt;/h2&gt;

&lt;p&gt;Probably more so than many areas of programming, game development is strongly object-orientated and full of state. On the face of it, it lends itself very well to that methodology. A frequent response I receive when mentioning I use an FP language is surprise that it’s feasible to make games this way and interest in how it may be done.&lt;/p&gt;

&lt;p&gt;So why have I chosen to build a game with FP? To put it simply; I’ve grown tired of the traditional ways of architecting software. Imperative object-orientated code inevitably leads to frustrating issues like &lt;a href=&quot;http://en.wikipedia.org/wiki/Side_effect_(computer_science)&quot;&gt;side effects&lt;/a&gt; and over engineering, and to my eyes it looks ugly.&lt;/p&gt;

&lt;p&gt;This is just an opinion, so feel free to stick with what you know, but if you yearn for something different why not take a stroll down the functional path.&lt;/p&gt;

&lt;h2 id=&quot;iteration&quot;&gt;Iteration&lt;/h2&gt;

&lt;p&gt;Consider this basic example in javascript, squaring a list of numbers. With imperative code you describe how something will happen, with functional code (a subset of &lt;a href=&quot;https://en.wikipedia.org/wiki/Declarative_programming&quot;&gt;declarative&lt;/a&gt;) you describe what you want to happen. So in the imperative style we have to define a temporary index variable and construct a loop to iterate through the list updating each value in turn:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;numbers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Compare this to the functional approach. If you are writing in javascript you can use the great &lt;a href=&quot;https://lodash.com&quot;&gt;lodash&lt;/a&gt; library. However using a language specifically designed for FP is highly beneficial, so lets do it in &lt;a href=&quot;http://elm-lang.org&quot;&gt;elm&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;square&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;square&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;numbers&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;numbers&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;square&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;With elm we do not need to use temporary variables, we can construct our list of numbers easily, and define a function that can be used elsewhere. With &lt;code&gt;map&lt;/code&gt; we apply &lt;code&gt;square&lt;/code&gt; onto each number in the list and return the new list.&lt;/p&gt;

&lt;p&gt;As you can see, functions are type-hinted for each of the parameters with the final type referring to the output. The &lt;code&gt;import List (..)&lt;/code&gt; line simply brings in all the core list functions that elm provides such as &lt;code&gt;map&lt;/code&gt; and &lt;code&gt;filter&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;filtering&quot;&gt;Filtering&lt;/h2&gt;

&lt;p&gt;Now imagine we want to remove odd numbers from a list and only square the remaining even numbers. Approaching this imperatively we may write:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;numbers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;squaredNumbers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;squaredNumbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;numbers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;squaredNumbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Sure, it works, but having to define a second array is messy and we’ve had to write the &lt;code&gt;for&lt;/code&gt; loop definition again. This is one of my least favourite things about the imperative style; you’ll write the same 35 boilerplate characters a thousand times throughout your codebase.&lt;/p&gt;

&lt;p&gt;Let’s try it functionally:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span class=&quot;nf&quot;&gt;isEven&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;isEven&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;numbers&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;numbers&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;square&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isEven&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We apply the filter to the list of numbers and can reuse our &lt;code&gt;square&lt;/code&gt; function from before so we don’t need to repeat ourselves for a slightly different behaviour.&lt;/p&gt;

&lt;p&gt;And here’s the brilliant thing about FP, you spend less time working out what the author intended; you can simply read it. And this improves further with chaining.&lt;/p&gt;

&lt;h2 id=&quot;chaining&quot;&gt;Chaining&lt;/h2&gt;

&lt;p&gt;If you were thinking the nesting of functions could get out of hand, you are right. In elm we can use the &lt;code&gt;|&amp;gt;&lt;/code&gt; operator to help us chain function calls.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;|&amp;gt;&lt;/code&gt; operator is an alias for function application. It takes the value to it’s left and passes this as the tail argument to the function on it’s right. There is also &lt;code&gt;&amp;lt;|&lt;/code&gt; which does this in the reverse direction.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span class=&quot;c1&quot;&gt;-- this&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;-- is equivalent to this&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;When we have multiple functions to call it’s easy to see the benefit:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span class=&quot;c1&quot;&gt;-- this&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;-- is equivalent to this&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This helps you reduce the number of brackets you have to write, and makes your code easier to read. It becomes more like a sentence:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span class=&quot;nf&quot;&gt;numbers&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;numbers&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isEven&lt;/span&gt;
           &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;square&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;composition&quot;&gt;Composition&lt;/h2&gt;

&lt;p&gt;An often better alternative to chaining is composition, &lt;a href=&quot;https://en.wikipedia.org/wiki/Function_composition_(computer_science)&quot;&gt;combining simple functions to build more complicated ones&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In elm we can compose functions together using the &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; operator. This composes two functions together without us needing to specify the way inputs are passed.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span class=&quot;c1&quot;&gt;-- this&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isEven&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;not&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;-- is equivalent to&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isEven&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;To get a bit logical, if we know that &lt;code&gt;g : A -&amp;gt; B&lt;/code&gt; and &lt;code&gt;f : B -&amp;gt; C&lt;/code&gt; we can then compose them together to create &lt;code&gt;g &amp;gt;&amp;gt; f : A -&amp;gt; C&lt;/code&gt; (and the order can be reversed as &lt;code&gt;f &amp;lt;&amp;lt; g : A -&amp;gt; C&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;In this example we are checking to see if the square of a given number is odd:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span class=&quot;nf&quot;&gt;squareIsOdd&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;square&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isEven&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- `not` is a built-in function that inverts booleans&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;squareIsOdd&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;True&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;squareIsOdd&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;False&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The inputs given to &lt;code&gt;squareIsOdd&lt;/code&gt; are implicitly passed through to the composed functions, each one in turn passing it’s output on to the next.&lt;/p&gt;

&lt;h2 id=&quot;state&quot;&gt;State&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/State_(computer_science)&quot;&gt;State&lt;/a&gt; is the data that the program stores in variables and as properties on objects. The problem with state stored in this way is that it allows the developer to modify a variable that is outside the scope of the current block, creating a side effect. For example:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&amp;quot;baz&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&amp;quot;setBaz&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;baz&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;qux&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// yuck!&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;bar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&amp;quot;qux&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setBaz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;There may be a valid reason for changing the value of &lt;code&gt;bar.qux&lt;/code&gt;, if it should always be double &lt;code&gt;foo.baz&lt;/code&gt;. But unless a developer knows or reads the definition of &lt;code&gt;setBaz&lt;/code&gt; they won’t know that it changes &lt;code&gt;bar.qux&lt;/code&gt;. The api of the object lies. In this trivial example you could easily, and correctly, identify that this is bad code. But the availability of this almost inevitably leads to programmers writing these side effects. I’ve seen and done it a great deal.&lt;/p&gt;

&lt;p&gt;So how do we solve this issue? By providing no way for the developer to write side effects. With elm there is no global state, there are no variables, there is just input data and output data.&lt;/p&gt;

&lt;p&gt;However if the function performs no update operation and only returns the input, the output is the same piece of data to prevent unnecessary copies.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span class=&quot;nf&quot;&gt;noop&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;sameAsInput&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;noop&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;b&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;So taking this to our &lt;code&gt;setBaz&lt;/code&gt; example in elm:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span class=&quot;kr&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;baz&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bar&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;qux&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Foo&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;baz&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;bar&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bar&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;bar&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;qux&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;setFooBaz&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Foo&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;setFooBaz&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;baz&amp;#39;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;baz&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;baz&amp;#39;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;setFooBaz&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We can see that there is no way for &lt;code&gt;setFooBaz&lt;/code&gt; to modify &lt;code&gt;bar.qux&lt;/code&gt;. The function can not access data outside it’s scope and can only return the new version of &lt;code&gt;foo&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To clarify, you may be thinking that &lt;code&gt;foo : Foo&lt;/code&gt; is a variable of type &lt;code&gt;Foo&lt;/code&gt;, but it is not. It is a function that takes no input and outputs a data object. We could easily change it to &lt;code&gt;foo : Int -&amp;gt; Foo&lt;/code&gt;, to allow &lt;code&gt;baz&lt;/code&gt; to be initialised to some value.&lt;/p&gt;

&lt;p&gt;If we still want to ensure &lt;code&gt;bar.qux&lt;/code&gt; is updated to be double &lt;code&gt;foo.baz&lt;/code&gt;, we can create a function which takes a data object comprising of both, calls the two update functions and returns the modified parent:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span class=&quot;kr&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;FooBar&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Foo&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bar&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;fooBar&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;FooBar&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;fooBar&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- our previously created `foo` function&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;update&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;FooBar&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;FooBar&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;update&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;baz&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fooBar&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fooBar&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fooBar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;setFooBaz&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;baz&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fooBar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;setBarQux&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;baz&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;fooBar&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fooBar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;update&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We are able to update the values as desired, but without side effects. The output of &lt;code&gt;update&lt;/code&gt; contains all the effects of it’s operations.&lt;/p&gt;

&lt;h2 id=&quot;elm&quot;&gt;Elm&lt;/h2&gt;

&lt;p&gt;In my opinion there’s a multitude of advantages to using a functional language and Elm is a fine example. Easy to read, easy to debug, resuable code without confusing side-effects. Why not give it a go for your next game jam project?&lt;/p&gt;

&lt;p&gt;Coming next: Signals. To hear when this is published and for news about the game I’m creating &lt;a href=&quot;https://twitter.com/gelatindesign&quot;&gt;follow me on twitter&lt;/a&gt;.&lt;/p&gt;

&lt;p class=&quot;update-note&quot;&gt;Updated [08 Feb, 2015]: Corrected a section regarding a &lt;code&gt;noop&lt;/code&gt; function, only record updates produce a new value.&lt;/p&gt;
</description>
        <pubDate>Sun, 08 Feb 2015 00:00:00 +0000</pubDate>
        <link>http://gelatindesign.co.uk/developing-games-in-elm/functional-programming</link>
        <guid isPermaLink="true">http://gelatindesign.co.uk/developing-games-in-elm/functional-programming</guid>
        
        <category>project-iso</category>
        
        <category>elm</category>
        
        
        <category>developing-games-in-elm</category>
        
      </item>
    
      <item>
        <title>Sprint One - Experiments</title>
        <description>&lt;p&gt;&lt;img src=&quot;/images/blog/2015-02-05/iso-map.jpg&quot; alt=&quot;Project ISO map&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;sprints&quot;&gt;Sprints&lt;/h2&gt;

&lt;p&gt;I’m splitting development into sprints with set objectives. The primary target is to develop the game to a playable state at the end of each sprint. This is to ensure motivation is maintained, progress can be tested and feedback can be received on the current state.&lt;/p&gt;

&lt;p&gt;Strictly speaking, the first sprint was completed a few weeks ago but I’ve continued to experiment and learn. So it’s run over a bit and I want to get some thoughts written down as I come up to my final few days on sprint two.&lt;/p&gt;

&lt;h2 id=&quot;isometric&quot;&gt;Isometric&lt;/h2&gt;

&lt;p&gt;So, the first actual task I had to look into was rendering an isometric tiled map. There’s plenty of resources regarding this on the web. Though they weren’t entirely applicable due to some technical choices I’ve made, I got going pretty quickly on it.&lt;/p&gt;

&lt;p&gt;After some messing around and learning I eventually arrived at a dynamically built map which could be resized and filled with a bunch of different tile types.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/blog/2015-02-05/iso-map-size.jpg&quot; alt=&quot;Project ISO map size&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;artwork&quot;&gt;Artwork&lt;/h2&gt;

&lt;p&gt;So this initial artwork is not my own, I am using the excellent asset packs by &lt;a href=&quot;http://kenney.nl&quot;&gt;Kenney&lt;/a&gt;. I’m not 100% sure how much if any of this stuff will be in the final game since it’s cheery aesthetic doesn’t match the ideas in my head, but it certainly helps to have such high quality placeholder for now!&lt;/p&gt;

&lt;p&gt;To hear more about this game’s development you can &lt;a href=&quot;https://twitter.com/gelatindesign&quot;&gt;follow it on twitter&lt;/a&gt; or &lt;a href=&quot;/feed.xml&quot;&gt;subscribe to the rss feed&lt;/a&gt; if that’s your thing.&lt;/p&gt;
</description>
        <pubDate>Thu, 05 Feb 2015 00:00:00 +0000</pubDate>
        <link>http://gelatindesign.co.uk/project-iso/sprint-one-experiments</link>
        <guid isPermaLink="true">http://gelatindesign.co.uk/project-iso/sprint-one-experiments</guid>
        
        <category>devblog</category>
        
        
        <category>project-iso</category>
        
      </item>
    
      <item>
        <title>A road to creating indie games</title>
        <description>&lt;p&gt;I’ve been learning about and experimenting with making computer games for a number of years now. During school I started out making some browser-based text and input games about running nation states and their military and economy. After going to university and a few years working as a web dev I then entered the fantastic &lt;a href=&quot;http://ludumdare.com&quot;&gt;Ludum Dare&lt;/a&gt; game jam. I really can’t remember what got me to enter that, but making my first actual game for it was an incredible experience. I was hooked on game development.&lt;/p&gt;

&lt;p&gt;The following is part a stream of thought that’s led me to game development and part a design concept for the game I’ll be making this year and hopefully releasing early 2016.&lt;/p&gt;

&lt;h2 id=&quot;why&quot;&gt;Why&lt;/h2&gt;

&lt;p&gt;When I first starting programming I began with C++ but soon moved to the web with HTML. The impetus for that move was a desire to see something more interesting than a dull terminal output. I wanted something that people could interact with, that I could show off to my friends and family. The web is a great option for that and the feedback is what drove me to pursue it as a career.&lt;/p&gt;

&lt;p&gt;And, as a career, it is great. I love it. But I find the story you can tell via the web is limited, though as much by clients’ requirements as technology and strict user experience issues. Experimentation on the web rarely leads to an increase in profits or happier customers.&lt;/p&gt;

&lt;p&gt;This leads me to another interactive medium - games. Games hold a unique space in media and art, the relationship between the creator and viewer is what makes the game. As a piece of art it does not exist without both the designer and the player. A game entirely hinges on it’s interactions, otherwise it is just a film. Even games which take this to it’s extreme where the only interaction is merely to move around afford the player the choice to observe the world from their own preferred point of view.&lt;/p&gt;

&lt;p&gt;While most art is made to be seen by other people, only in games can the interpretation be fundamentally changed by the observers choices. Taking them from observer to artist within the game’s world.&lt;/p&gt;

&lt;h2 id=&quot;what&quot;&gt;What&lt;/h2&gt;

&lt;p&gt;Having made a bunch of small games for various Ludum Dare jams or just for fun, I don’t feel the need to make something with a tiny scope this time. I’m not looking to design a 5 minute experience, I want to engage the player and get them to stop and consider. Though obviously I’ll still need to keep it within the realms of feasability for a solo developer.&lt;/p&gt;

&lt;p&gt;Two tropes of modern games that I feel have been inadequately addressed are war and morality. To be fair, those are two massive topics and it would be arrogant and foolish of me to suggest I can address both of them perfectly and succinctly where all others have failed. Though without any need to recoup development costs I do feel I can address them from a less constrained angle.&lt;/p&gt;

&lt;p&gt;The well discussed failure of many modern games’ take on morality is the idea that it can be boiled down to some simple binary linear scale. While you may be able to do a mixture of “good” and “evil” actions, the mechanics often punish you for not sticking solely to one. This clearly does not reflect reality in any way missing out on all the nuances. Indeed in the real world there is often some dissonance between the actions taken and morality proclamined by an individual or group.&lt;/p&gt;

&lt;p&gt;A recent game that has addressed morality in a more realistic manner is Telltale’s &lt;em&gt;The Walking Dead&lt;/em&gt;. It present’s you with choices that have to be made in a limited amount of time. These choices have no “right” answer, and often times the choice taken has no ultimate bearing on what happens. However, you are made to feel you’ve made the right or wrong choice by different characters. They will comment, approve or get angry at you. Causing you to feel an emotion as a reaction to both having to make the choice and it’s subsequent consequences, that is the root of a good morality system.&lt;/p&gt;

&lt;p&gt;War is usually presented in one of two ways; completely coldly with no discussion on the reason or against a clearly defined “bad guy”. The former is perfectly fine if it’s simply a context for the gameplay, and the latter is sometimes messed with by having the “bad guy” change in some revelation story plot point.&lt;/p&gt;

&lt;p&gt;But war in the real world is clearly infinitely more complex that that. Consider the &lt;a href=&quot;http://en.wikipedia.org/wiki/European_wars_of_religion&quot;&gt;european wars of religion&lt;/a&gt; of the 16th and 17th centuries. Even with hindsight it is essentially impossible to label any side as in the right, aggressor or not. The sheer brutality and inescapable unending destruction of the period is a feeling that should be represented.&lt;/p&gt;

&lt;p&gt;To address this better a game should either in some way consider the war from both sides or acknowledge it is presented from a biased point of view. This could be done through something as simple as a character questioning orders and decisions the player makes, or through a satirical over-the-top glorification of the cause as done in &lt;em&gt;&lt;a href=&quot;http://www.imdb.com/title/tt0120201/&quot;&gt;Starship Troopers&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;For my game I’m going to try to ensure the player always has at least a nagging feeling they’ve made a mistake. You may have won a battle, but at what cost to the enemy’s civilians? Was it justified to protect a smaller number of your own? Does that even matter? I won’t present a explicit “right” answer, but various characters will react to your choices in different ways.&lt;/p&gt;

&lt;p&gt;So if you take those points, throw in a bit of the tone of &lt;em&gt;&lt;a href=&quot;http://papersplea.se/&quot;&gt;Papers, Please&lt;/a&gt;&lt;/em&gt; and all in a Cold War-esque context you’ll have what I’m aiming for.&lt;/p&gt;

&lt;h2 id=&quot;how&quot;&gt;How&lt;/h2&gt;

&lt;p&gt;To keep the project realistically feasible I am going to take a well defined and iterated gameplay model in the style of the &lt;em&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Advance_Wars&quot;&gt;Advanced Wars&lt;/a&gt;&lt;/em&gt; series and apply my desired tone and theme on top. The mechanics won’t be straight up the same, but it provides a starting point from which I can expand as time allows.&lt;/p&gt;

&lt;p&gt;This is not to say the mechanics are secondary. Certainly not. A game that is boring to play will be boring irregardless of how compelling it’s story telling is. But the mechanics of combat will not be a priority but more a way to frame, drive and make choices. By keeping these mechanics fairly straightforward hopefully the player’s focus won’t stray too far from why they are choosing to bomb a city beyond just strategic concerns. Or indeed to let the player knowingly disregard all moral reasoning and place success above all else.&lt;/p&gt;

&lt;p&gt;On the technical side, I’ll be developing the game in &lt;a href=&quot;http://elm-lang.org/&quot;&gt;Elm&lt;/a&gt;, a functional reactive language that compiles to HTML &amp;amp; javascript. The final game will be packaged and downloadable and not playable through a browser to help take out another variable for testing since there is a lot of inconsistency across browsers in animation speed. Additionally players tend to expect different things of browser games. I’ll go into my reasons for using a functional language over more traditional options in a future post.&lt;/p&gt;

&lt;p&gt;Since I am no great artist, I’m going to use assets by &lt;a href=&quot;http://kenney.nl/assets&quot;&gt;Kenney&lt;/a&gt; as a base for the isometric terrain and cities and modify them for my aethestic as needed. Once I’m further into the project I may look into hiring better artists for specifics such as character design.&lt;/p&gt;

&lt;p&gt;Probably the biggest killer of personal projects is a loss of motivation. To combat this I am working on a 4-weekly sprint cycle with key targets for each sprint with the aim to producing something playable and different by the end of it. If I get ahead of schedule (as I did with my first sprint!) I’ll just start the next sprint sooner. If it looks like I’ll be ahead of schedule overall for the year I’ll start expanding features.&lt;/p&gt;

&lt;p&gt;Ideally I’ll have gameplay finalised during the summer and will spent the latter part of the year writing in story specifics, embellishing characters and final art.&lt;/p&gt;

&lt;h2 id=&quot;where&quot;&gt;Where&lt;/h2&gt;

&lt;p&gt;So this is the start of the road I’m taking. Where it’ll take me this year and beyond I’m not sure. All I can hope is that I am able to reach the end of it and have something that people will enjoy. If I release it and even one stranger is a satisfied customer I’ll consider this a success.&lt;/p&gt;

&lt;p&gt;But there’s always the dream…&lt;/p&gt;
</description>
        <pubDate>Thu, 01 Jan 2015 00:00:00 +0000</pubDate>
        <link>http://gelatindesign.co.uk/games/a-road-to-creating-indie-games</link>
        <guid isPermaLink="true">http://gelatindesign.co.uk/games/a-road-to-creating-indie-games</guid>
        
        <category>project-iso</category>
        
        
        <category>games</category>
        
      </item>
    
      <item>
        <title>Speeding up your git workflow</title>
        <description>&lt;p&gt;If you are doing a small task frequently then spending a little time to speed up that task really can pay off in a significant way (&lt;a href=&quot;https://xkcd.com/1205/&quot;&gt;relevant xkcd&lt;/a&gt;). As a developer there are few tools you will be interacting with more times a day than git, so lets speed it up!&lt;/p&gt;

&lt;h2 id=&quot;alias-git&quot;&gt;Alias git&lt;/h2&gt;

&lt;p&gt;First things first, you are going to want to alias &lt;code&gt;git&lt;/code&gt; to something even shorter. Open up your &lt;code&gt;.bash_profile&lt;/code&gt; (or &lt;code&gt;.zshrc&lt;/code&gt; &lt;a href=&quot;/blog/post/improve-your-terminal&quot;&gt;if you are using that&lt;/a&gt;) in nano or whatever and append:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;alias g=&quot;git&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you will be able to reference commands like &lt;code&gt;git checkout master&lt;/code&gt; using just &lt;code&gt;g checkout master&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;alias-gits-commands&quot;&gt;Alias git’s commands&lt;/h2&gt;

&lt;p&gt;That’s a good start but &lt;code&gt;checkout&lt;/code&gt; is a lot of characters, let’s bring that down along with all the other git commands. Git comes with it’s own aliasing which you can configure by running this in your terminal:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;g config --global alias.a add
g config --global alias.b branch
g config --global alias.c commit
g config --global alias.cf config
g config --global alias.co checkout
g config --global alias.s status
g config --global alias.sh stash
g config --global alias.pl pull
g config --global alias.ps push
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now your typical workflow can be reduced to:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ g co -b &quot;feature/foo&quot;
$ g a .
$ g c -m &quot;Added foo&quot;
$ g ps
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is pretty great, it may seem like only a few characters but if you are typing those characters dozens of times a day it can add up quickly.&lt;/p&gt;

&lt;h2 id=&quot;alias-your-workflow&quot;&gt;Alias your workflow&lt;/h2&gt;

&lt;p&gt;And we can take it one final step further. What is your most common action? Pulling down the latest changes, adding and commiting yours on top and then pushing back up. So lets shorten that as far as we possibly can. Once again, open up and edit your &lt;code&gt;.bash_profile&lt;/code&gt; or &lt;code&gt;.zshrc&lt;/code&gt; file and append it with a custom method:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gqc() {
    g sh &amp;amp;&amp;amp; g pl &amp;amp;&amp;amp; g sh pop &amp;amp;&amp;amp; g a -A &amp;amp;&amp;amp; g c -m $1 &amp;amp;&amp;amp; g ps
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here we stash any local changes, pull the remote, pop our local changes, add them, then commit with the first argument as the message and finally push them up. You can call it like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ gqc &quot;Updated foo&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What would have required 80 keystrokes can now be done in 18. At 60 wpm that’s a saving of about 4.5 seconds each time (not counting waiting) which could be up to 3 minutes a day. That’s around 12 hours a year. Or 20 days in a 40 year career! 20 days saved, from what is a 5 minute job!&lt;/p&gt;

&lt;p&gt;Amazing.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;totally accurate numbers…&lt;/em&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 10 Oct 2014 00:00:00 +0100</pubDate>
        <link>http://gelatindesign.co.uk/coding/speeding-up-your-git-workflow</link>
        <guid isPermaLink="true">http://gelatindesign.co.uk/coding/speeding-up-your-git-workflow</guid>
        
        <category>git</category>
        
        <category>terminal</category>
        
        
        <category>coding</category>
        
      </item>
    
      <item>
        <title>The variables of CodeClub</title>
        <description>&lt;p&gt;&lt;em&gt;Originally posted on &lt;a href=&quot;http://www.message.co.uk/the-variables-of-code-club&quot;&gt;the Message blog&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/blog/2014-06-16/codeclub.png&quot; alt=&quot;Codeclub lesson&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I’ve been running a &lt;a href=&quot;&quot;&gt;Code Club&lt;/a&gt; class since January and the thing I’ve most come to realise is that teaching is hard. There is a group of variables that constantly challenge your approach to a subject, and those variables are the students.&lt;/p&gt;

&lt;p&gt;These are some of the difficulties I’ve had teaching the class. I’m sure qualified teachers are well aware of them, but as a developer there’s many an unexpected occurrence.&lt;/p&gt;

&lt;h2 id=&quot;assumptions&quot;&gt;Assumptions&lt;/h2&gt;

&lt;p&gt;Discard any assumptions you might have. What you call a file the students may call a page. They likely won’t know where all the special characters are on the keyboard. They probably haven’t done modulus in maths yet. Programming loops aren’t a particularly obvious concept. And why doesn’t it always just run from top to bottom?&lt;/p&gt;

&lt;p&gt;The last one of those seems to be a more difficult idea to understand, calling functions in one place and defining them elsewhere. It’s hard to guage how well each student gets this, but it’s one of those thing that will gradually improve as you progress through the lessons.&lt;/p&gt;

&lt;h2 id=&quot;silence&quot;&gt;Silence&lt;/h2&gt;

&lt;p&gt;“Did everyone understand that?”&lt;br /&gt;
“…”&lt;br /&gt;
“Did anyone not follow?”&lt;br /&gt;
“…”&lt;br /&gt;
“Does anyone want me to go over it again?”&lt;br /&gt;
“…”&lt;/p&gt;

&lt;p&gt;It’s quite a surprise to go from an environment where you have constant dialogue about code to one where what you say is accepted as gospel. I haven’t yet worked out the trick to get students to actually respond to questions asked from the front. But the method that seems to more or less work is going through small logical code changes from the front and then get them to write it. Followed by a quick run around between students helping them fix issues. If you can, get a second developer to act as a classroom assistant to help with this.&lt;/p&gt;

&lt;p&gt;It’s possible that having the students read directly from the lesson sheets could work better, but that does seem to generate the same questions over and over.&lt;/p&gt;

&lt;p&gt;Just keep in mind, if the kids are looking at you in silence it’s most likely because they are paying attention. It’s when they are making a noise that you should be concerned.&lt;/p&gt;

&lt;h2 id=&quot;typos-tpoys-tiepose-everyware&quot;&gt;Typos, tpoys, tiepose everyware&lt;/h2&gt;

&lt;p&gt;You know how often your own bugs are caused by typos? Yeah, multiply that by a bajillion.&lt;/p&gt;

&lt;p&gt;It’s one of those things you forget you did as a child, learning to type. But try writing silly coding terms correctly like def instead of define, mixing words and numbers in odd ways, plus some completely non-standard punctuation all over the place and you’ll end up with constant bugs.Then there’s indentation…&lt;/p&gt;

&lt;p&gt;“Why is my code not working?”&lt;br /&gt;
“You’ve missed a tab on that line, you need to make sure it is tabbed in once after your if statement.”&lt;br /&gt;
&lt;em&gt;Student presses spacebar once&lt;/em&gt;&lt;br /&gt;
“No, you need to make sure you use the tab key so it all lines up correctly”&lt;br /&gt;
&lt;em&gt;Student presses tab once leaving the space in there as well&lt;/em&gt;&lt;br /&gt;
“Umm, you need to remove that extra space you added”&lt;br /&gt;
&lt;em&gt;Student presses backspace twice&lt;/em&gt;&lt;br /&gt;
“And… add the tab back in”&lt;br /&gt;
&lt;em&gt;Student presses tab key&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;That happens several times a lesson. The students are getting better at it as they become more comfortable with the syntax, you just need to be patient and it will all compile and run in the end.&lt;/p&gt;

&lt;h2 id=&quot;repetition&quot;&gt;Repetition&lt;/h2&gt;

&lt;p&gt;The most important point to be made is that saying something once is not at all enough. Repetition is the key to learning. Repeat yourself within each lesson. Repeat last weeks concepts in the next lesson. Repeat things on an individual student basis. Repeat what you did last lesson. And repeat things to each student.&lt;/p&gt;

&lt;h2 id=&quot;coding-woo&quot;&gt;Coding, woo!&lt;/h2&gt;

&lt;p&gt;It takes time, is often difficult, and you may not see the results until several weeks later. But who ever learnt to code perfectly in a matter of weeks? Take heart in the kids returning each week to an optional after school class. We get to influence the future of these people into the fantastic career and hobby of coding. Yeah!&lt;/p&gt;
</description>
        <pubDate>Mon, 16 Jun 2014 00:00:00 +0100</pubDate>
        <link>http://gelatindesign.co.uk/codeclub/the-variables-of-codeclub</link>
        <guid isPermaLink="true">http://gelatindesign.co.uk/codeclub/the-variables-of-codeclub</guid>
        
        
        <category>codeclub</category>
        
      </item>
    
      <item>
        <title>Isolationism, Division and Hate</title>
        <description>&lt;h2 id=&quot;cause&quot;&gt;Cause&lt;/h2&gt;

&lt;p&gt;I grew up being taught that I was in a special group of people that had been chosen to live in an eternal utopia and everyone else would burn. It came from a place of love and desire to help me, but it created a division between me and others. It isolated me and some of my friends from others around. No matter the intent, isolationism and division generate hate.&lt;/p&gt;

&lt;p&gt;I grew up being taught that I was in a special group of people who had been born in the greatest country, the one with the most history, the largest empire that has existed. Because I am English it is my destiny to conquer the world. I wasn’t directly taught that people of other countries were lesser, but that my English blood makes me stronger. I wasn’t taught to be racist, none of my friends or family were racist, but it created a division between me and others. It isolated me from others in the world. No matter the intent, isolationism and division generate hate.&lt;/p&gt;

&lt;p&gt;I grew up being taught that I was in a special group of people of my gender, and that as a male it was my role to grow up and lead my family, to be the breadwinner, to be the head of the family. I wasn’t taught women were lesser, indeed I was specifically taught that we are equal but the man is in charge. I wasn’t taught to be sexist, none of my friends or family were sexist, but it created a division between me and others. It isolated me from women and other genders in the world. No matter the intent, isolationism and division generate hate.&lt;/p&gt;

&lt;p&gt;I grew up being taught I was in a special group of people who were not broken, who were allowed to love since we were the ones who loved in the correct way. Because I am straight I am allowed my own family, I am allowed to declare my love for another and bind to them for life. I wasn’t taught to be homophobic, I was taught to “hate the sin not the sinner”,  to despise the act not the person. But this created a division between me and others. It isolated me from the full scope of love that exists. No matter the intent, isolationism and division generate hate.&lt;/p&gt;

&lt;p&gt;No one intended to teach me to be isolationist, no one intended to teach me to be divisive, no one intended to teach me to hate. But I learnt isolationism, I learnt to be divisive and I learnt hate.&lt;/p&gt;

&lt;p&gt;Let me clarify, hate doesn’t have to mean violence, it doesn’t have to mean bullying, it doesn’t have to mean directed aggression. Hate comes from the heart, it comes from deeply held beliefs that seperate you from others, it can be an entirely internal thought process.&lt;/p&gt;

&lt;h2 id=&quot;effect&quot;&gt;Effect&lt;/h2&gt;

&lt;p&gt;What is the result of this hate?&lt;/p&gt;

&lt;p&gt;For society it’s an ongoing disaster. As political parties such as UKIP and the Scottish National Party continue to preach isolationism from international entities they are generating a society that fears and hates those of different nationality.&lt;/p&gt;

&lt;p&gt;UKIP tell us to beware the dirty Bulgarians who might come to our country and steal our jobs, our money, our NHS, our land. As if we are any different. As if we don’t have our money and land as a direct result of going to other’s countries and stealing it from them.&lt;/p&gt;

&lt;p&gt;A Bulgarian father is your father, a Syrian mother is your mother, an Israeli son is your son, a Palestinian daughter is your daughter, an Iranian cousin is your cousin and a North Korean grandmother is your grandmother. Your money is their money, your land is their land, your life is their life, your love is their love and this world is our world.&lt;/p&gt;

&lt;p&gt;Have no judgement in your heart for those who act in the way their society has taught them to act, for you act with all the prejudices and inequalities of your society. Instead come together to create a single society that consists of all humanity, accepts all humanity and preaches humanity.&lt;/p&gt;

&lt;p&gt;Does that sound like some unattainable utopia? Just let me say this, there is nothing that dictates what happens to us beyond ourselves. If we want to achieve something we can. We can achieve utopia through peace and abundance, a post-scarcity society built on freely available resources generated through technology. technology that comes from knowledge, knowledge that comes from education. You think that sounds like the silly statement of someone who hasn’t seen the world? Then you have been defeated by the world, stand up and try again.&lt;/p&gt;

&lt;p&gt;Still don’t think it’s possible? Go read about &lt;a href=&quot;http://www.sesame.org.jo/sesame/about-us/what-is-sesame.html&quot;&gt;SESAME, Synchrotron-light for Experimental Science and Applications in the Middle East&lt;/a&gt;. It’s a joint effort of various Israeli, Palestinian, Iranian and other scientists building a particle accelerator in Jordan.&lt;/p&gt;

&lt;p&gt;Without hate there is no limit to what humanity can achieve.&lt;/p&gt;

&lt;h2 id=&quot;solution&quot;&gt;Solution&lt;/h2&gt;

&lt;p&gt;So what is the solution for hate on a personal level? What solved it for me?&lt;/p&gt;

&lt;p&gt;If conflicts are caused by ignorance, fear and hate then peace is found through education, acceptance and equality.&lt;/p&gt;

&lt;p&gt;Two years ago I was becoming disenchanted with my religious beliefs, I was beginning to see the cracks in the dogma. A religion of peace that has a god of war, a religion of life that condemns the ignorant to death. I took a step back and decided to look at both sides of the coin with as little emotion and bias as possible. It didn’t take long to realise the truth of hate behind the facade of love. I was educated through online discussion, books and videos that taught me to accept others as equally deserving of a future.&lt;/p&gt;

&lt;p&gt;A bit less than a year ago I started a new job and made some new friends. One guy in particular struck me with a simple statement - “I’m a feminist”. I didn’t really understand, how can a man be a feminist? I had always been taught by society that feminists were this extreme group of women who hate men. Through conversation and discussion he and others educated me, I changed my opinion and accepted their viewpoint.&lt;/p&gt;

&lt;p&gt;Today I continue to internally fight the thoughts and prejudices that occassionaly attempt to resurface. But through continued self-education and conversation I try to accept all who cross my path and strive for equality in all I do and where I go.&lt;/p&gt;

&lt;p&gt;Please do the same.&lt;/p&gt;
</description>
        <pubDate>Sat, 31 May 2014 00:00:00 +0100</pubDate>
        <link>http://gelatindesign.co.uk/opinion/isolationism-division-and-hate</link>
        <guid isPermaLink="true">http://gelatindesign.co.uk/opinion/isolationism-division-and-hate</guid>
        
        
        <category>opinion</category>
        
      </item>
    
      <item>
        <title>Creating a blog with Metalsmith</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;Update: Since writing this article I’ve actually updated the site to use Jekyll. Various packages kept breaking due to version compatibility issues etc. I got bored and just switched over to a more stable solution.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I’ve been looking at converting this site to use a static-site generator. Prior to this I’ve been using a simple custom blog on top of Laravel. As much as I love Laravel, it seems a touch pointless to have all this dynamic code behind what is just static content pages.&lt;/p&gt;

&lt;p&gt;With that in mind I had a look around at what the available options were. Jekyll seemed like a good choice and I began working on porting my content to it. However I wasn’t particuarly sold, not sure why I just didn’t feel happy using it. I wanted more control and to organise my files how I wanted.&lt;/p&gt;

&lt;p&gt;Yesterday I saw a retweet about &lt;a href=&quot;http://metalsmith.io&quot;&gt;Metalsmith&lt;/a&gt; which looked very similar to &lt;a href=&quot;/blog/post/easily-build-assets-with-gulpjs&quot;&gt;Gulpjs which I am already a big fan of&lt;/a&gt;. I started a few hours ago writing my build script and porting my content and now not long later it’s all done.&lt;/p&gt;

&lt;p&gt;I did have to do some work to get things how I wanted. Metalsmith is very hands-off so if you want list pages, pagination, tag pages etc you will have to write these yourself.&lt;/p&gt;

&lt;p&gt;Fortunately it’s dead simple to do. Plugins are easy to write and you can just manipulate the files being generated. So for example a tagging plugin could be written as so:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var metalsmith  = require(&#39;metalsmith&#39;),
    collections = require(&#39;metalsmith-collections&#39;);

metalsmith(__dirname)

    // group together all files in the `/blog/` directory as posts
    .use(collections({
        posts: {
            pattern: &#39;blog/*&#39;,
            sortBy: &#39;date&#39;,
            reverse: true,
        }
    }))

    // generate the tag listing pages
    .use(blogTagLists)

    // build
    .build(function(err) {
        if (err) throw err;
    });

function blogTagLists(files, metalsmith, done) {
    var tags = {};

    // loop the posts collection, creating new groups on the tags
    for (p in metalsmith.data.posts) {
        for (t in metalsmith.data.posts[p].tags) {
            tag = metalsmith.data.posts[p].tags[t];
            if (! tags[tag]) {
                tags[tag] = [];
            }

            tags[tag].push(metalsmith.data.posts[p]);
        }
    }

    // loop the tags and create a new index file for each tag
    for (tag in tags) {
        files[&#39;blog/tag/&#39; + tag + &#39;/index.md&#39;] = {
            template: &#39;list.html&#39;,
            mode: &#39;0644&#39;,
            contents: &#39;&#39;,
            title: &quot;Posts tagged &#39;&quot; + tag + &quot;&#39;&quot;,
            posts: tags[tag],
        }
    }

    done();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can see my full &lt;a href=&quot;http://github.com/lsjroberts/gelatin-design/tree/master/build.js&quot;&gt;build.js file here&lt;/a&gt; along with the rest of the code for this site.&lt;/p&gt;

&lt;p&gt;If you’re looking for a static-site generator which gives you a lot of control then I really recommend &lt;a href=&quot;http://metalsmith.io&quot;&gt;Metalsmith&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Sat, 24 May 2014 00:00:00 +0100</pubDate>
        <link>http://gelatindesign.co.uk/coding/creating-a-blog-with-metalsmith</link>
        <guid isPermaLink="true">http://gelatindesign.co.uk/coding/creating-a-blog-with-metalsmith</guid>
        
        <category>javascript</category>
        
        <category>nodejs</category>
        
        <category>metalsmith</category>
        
        <category>jekyll</category>
        
        
        <category>coding</category>
        
      </item>
    
      <item>
        <title>Improve your terminal</title>
        <description>&lt;p&gt;I believe one of the main contributing factors to people being wary of using the terminal is the terrible defaults for text and colours. The good news is that these are pretty easy to fix.&lt;/p&gt;

&lt;p&gt;After going through the following changes you’ll end up with a lovely terminal like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/blog/2014-05-15/lovely-terminal.png&quot; alt=&quot;lovely terminal&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;oh-my-zshell&quot;&gt;Oh my zshell!&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/robbyrussell/oh-my-zsh&quot;&gt;on-my-zsh&lt;/a&gt; is a must-have tool for frequent terminal users. It makes it easy to use themes for styling, but provides so much more functionality than that.&lt;/p&gt;

&lt;p&gt;If you trust the author of that tool then you can install it by just running&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ curl -L http://install.ohmyz.sh | sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That’ll set up the default config at &lt;code&gt;~/.zshrc&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If you want to you can install it manually, check that out at the &lt;a href=&quot;https://github.com/robbyrussell/oh-my-zsh&quot;&gt;github repo&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;pick-a-theme&quot;&gt;Pick a theme&lt;/h3&gt;

&lt;p&gt;I personally use the &lt;code&gt;ys&lt;/code&gt; theme, it presents your current directory, git branch and status and the current type before each command you type. This lets you see at a glance what’s going on and when you fired a long running command allowing you to see how long it’s taking.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/blog/2014-05-15/ys-line-header.png&quot; alt=&quot;ys line header&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To install your theme of choice, change your &lt;code&gt;~/.zshrc&lt;/code&gt; to include&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ZSH_THEME=ys
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;fonts-and-colours&quot;&gt;Fonts and colours&lt;/h2&gt;

&lt;p&gt;In addition to your theme you should set your default text font and colour and your terminal background colour. On a Mac you can do this quite easily within the terminal preferences by going to &lt;code&gt;Terminal &amp;gt; Preferences...&lt;/code&gt; and change the options under &lt;code&gt;Text&lt;/code&gt; and &lt;code&gt;Window&lt;/code&gt;. On Linux you can do this under &lt;code&gt;Edit &amp;gt; Profile Preferences&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Picking a font is pretty important, it has to be monospaced and some good choices are Monaco, Source Code Pro, Inconsolata. I personally use Iconsolata.&lt;/p&gt;

&lt;p&gt;Secondly you really should think about setting the font size to something nice and large, I go with 18px. You will be staring at your terminal for a long time, don’t break your eyes to do it.&lt;/p&gt;

&lt;p&gt;It’s worth nothing, that while background transparency might look cool, it will definitely hinder your ability to focus and work, so please just set it to 100% opacity.&lt;/p&gt;

&lt;p&gt;Finally, I personally like to add extra space between lines, I find it really helps reading, so I set line spacing to &lt;code&gt;1.5&lt;/code&gt; and character spacing to &lt;code&gt;1.05&lt;/code&gt;. But this will depend on your personal tastes and the font you chose.&lt;/p&gt;

&lt;h2 id=&quot;the-terminal-is-the-best-place-for-a-developer-to-develop&quot;&gt;The terminal is the best place for a developer to develop&lt;/h2&gt;

&lt;p&gt;So much of development requires running a command-line tool here and there that you may as well just stay in the terminal the whole time. Don’t use a gui program to manage your git repos, they are all slower than just running the git commands yourself. It takes time to learn but once you’ve learnt it you’ll gain that back in time saved getting things done.&lt;/p&gt;

&lt;p&gt;With that in mind I’ve been looking to get away from my final non-terminal based development tool, the text editor (Sublime Text 2 in my case). I’ve been learning vim, indeed I wrote this article with vim. It’s fantastic. If you are interested in learning vim, run&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ vimtutor
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and go through it’s lessons every day and you’ll soon get the hang of this powerful tool.&lt;/p&gt;

&lt;p&gt;Once I’m comfortable using vim I’ll write up a tutorial on customising it, though it might take a few weeks to get to that stage.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Update: I never got comfortable with vim. It may be powerful, but good grief it’s just way too frustrating to get there.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Thu, 15 May 2014 00:00:00 +0100</pubDate>
        <link>http://gelatindesign.co.uk/coding/improve-your-terminal</link>
        <guid isPermaLink="true">http://gelatindesign.co.uk/coding/improve-your-terminal</guid>
        
        <category>terminal</category>
        
        
        <category>coding</category>
        
      </item>
    
      <item>
        <title>Playing with pythons and turtles</title>
        <description>&lt;p&gt;For this week’s CodeClub lesson we looked at the python library &lt;a href=&quot;https://docs.python.org/3.4/library/turtle.html&quot;&gt;turtle&lt;/a&gt;. It’s a easy and fun little graphics library based around moving a “turtle” cursor around the screen, drawing lines and filling in shapes.&lt;/p&gt;

&lt;p&gt;For something that is so basic in functionality it’s surprising how the results can be so satisfying.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/lsjroberts/codeclub/tree/master/python/lesson01-02&quot;&gt;You can check out the code at github.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/blog/2014-04-30/turtle-1.png&quot;&gt;&lt;img src=&quot;/images/blog/2014-04-30/turtle-1.png&quot; alt=&quot;Python Turtle Screenshot 1&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;&lt;a href=&quot;/images/blog/2014-04-30/turtle-2.png&quot;&gt;&lt;img src=&quot;/images/blog/2014-04-30/turtle-2.png&quot; alt=&quot;Python Turtle Screenshot 1&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;iframe width=&quot;745&quot; height=&quot;419&quot; src=&quot;//www.youtube.com/embed/WC75-nAJylo&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
</description>
        <pubDate>Wed, 30 Apr 2014 00:00:00 +0100</pubDate>
        <link>http://gelatindesign.co.uk/codeclub/playing-with-pythons-and-turtles</link>
        <guid isPermaLink="true">http://gelatindesign.co.uk/codeclub/playing-with-pythons-and-turtles</guid>
        
        <category>python</category>
        
        <category>turtle</category>
        
        
        <category>codeclub</category>
        
      </item>
    
  </channel>
</rss>
